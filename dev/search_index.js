var documenterSearchIndex = {"docs":
[{"location":"algorithms/sqrt_kalman_filter/#Square-root-Kalman-Filter","page":"Square-root Kalman filter","title":"Square-root Kalman Filter","text":"","category":"section"},{"location":"algorithms/sqrt_kalman_filter/#Note-regarding-Sqrt-Kalman-filter-implementation","page":"Square-root Kalman filter","title":"Note regarding Sqrt-Kalman filter implementation","text":"","category":"section"},{"location":"algorithms/sqrt_kalman_filter/","page":"Square-root Kalman filter","title":"Square-root Kalman filter","text":"The present implementation assumes right matrix-square roots of the involved covariance matrices. This means that a PSD covariance matrix mathrmP is decomposed as","category":"page"},{"location":"algorithms/sqrt_kalman_filter/","page":"Square-root Kalman filter","title":"Square-root Kalman filter","text":"mathrmP = mathrmU^top mathrmU","category":"page"},{"location":"algorithms/sqrt_kalman_filter/","page":"Square-root Kalman filter","title":"Square-root Kalman filter","text":"This is in contrast to assuming a decomposition mathrmP = mathrmL mathrmL^top, as is also often the convention.","category":"page"},{"location":"algorithms/sqrt_kalman_filter/#References","page":"Square-root Kalman filter","title":"References","text":"","category":"section"},{"location":"algorithms/sqrt_kalman_filter/","page":"Square-root Kalman filter","title":"Square-root Kalman filter","text":"[1] Mohinder S Grewal and Angus P Andrews. Kalman filtering: Theory and Practice with MATLAB. John Wiley & Sons, 2014.\n[2] Krämer, N., & Hennig, P. (2020). Stable implementation of probabilistic ODE solvers. arXiv:2012.10106.","category":"page"},{"location":"algorithms/sqrt_kalman_filter/#Methods","page":"Square-root Kalman filter","title":"Methods","text":"","category":"section"},{"location":"algorithms/sqrt_kalman_filter/#Sqrt-KF-Prediction","page":"Square-root Kalman filter","title":"Sqrt-KF Prediction","text":"","category":"section"},{"location":"algorithms/sqrt_kalman_filter/","page":"Square-root Kalman filter","title":"Square-root Kalman filter","text":"sqrt_kf_predict\nsqrt_kf_predict!","category":"page"},{"location":"algorithms/sqrt_kalman_filter/#PhDSE.sqrt_kf_predict","page":"Square-root Kalman filter","title":"PhDSE.sqrt_kf_predict","text":"sqrt_kf_predict(μ, sqrt_Σ, Φ, sqrt_Q, [u])\n\nPrediction step in a square-root Kalman filter. Computes the same posterior distribution as the standard Kalman filter (kf_predict) but is numerically more stable. Works entirely on right matrix-square-roots of the covariance matrices.\n\nArguments\n\nμ::AbstractVector: the current filtering mean\nsqrt_Σ::UpperTriangular: right matrix-square-root of the current filtering covariance matrix\nΦ::AbstractMatrix: transition matrix, i.e. dynamics of the state space model\nsqrt_Q::UpperTriangular: right matrix square root of transition covariance, i.e. process noise of the state space model\nu::AbstractVector (optional): affine control input to the dynamics\n\nReferences\n\n[1] Krämer, N., & Hennig, P. (2020). Stable implementation of probabilistic ODE solvers.\n\n\n\n\n\n","category":"function"},{"location":"algorithms/sqrt_kalman_filter/#PhDSE.sqrt_kf_predict!","page":"Square-root Kalman filter","title":"PhDSE.sqrt_kf_predict!","text":"sqrt_kf_predict!(c, Φ, sqrt_Q, [u])\n\nIn-place prediction step in a square-root Kalman filter. Computes the same posterior distribution as the standard Kalman filter (kf_predict!) but is numerically more stable. Works entirely on right matrix-square-roots of the covariance matrices.\n\nArguments\n\nc::FilteringCache: Cache holding pre-allocated matrices and vectors\nΦ::AbstractMatrix: transition matrix, i.e. dynamics of the state space model\nsqrt_Q::UpperTriangular: right matrix square root of transition covariance, i.e. process noise of the state space model\nu::AbstractVector (optional): affine control input to the dynamics\n\nReferences\n\n[1] Krämer, N., & Hennig, P. (2020). Stable implementation of probabilistic ODE solvers.\n\n\n\n\n\n","category":"function"},{"location":"algorithms/sqrt_kalman_filter/#Sqrt-KF-Correction","page":"Square-root Kalman filter","title":"Sqrt-KF Correction","text":"","category":"section"},{"location":"algorithms/sqrt_kalman_filter/","page":"Square-root Kalman filter","title":"Square-root Kalman filter","text":"sqrt_kf_correct\nsqrt_kf_correct!","category":"page"},{"location":"algorithms/sqrt_kalman_filter/#PhDSE.sqrt_kf_correct","page":"Square-root Kalman filter","title":"PhDSE.sqrt_kf_correct","text":"sqrt_kf_correct(μ⁻, sqrt_Σ⁻, H, sqrt_R, y, [v])\n\nCorrection step in a square-root Kalman filter. Computes the same posterior distribution as the standard Kalman filter (kf_correct) but is numerically more stable. Works entirely on right matrix-square-roots of the covariance matrices.\n\nArguments\n\nμ⁻::AbstractVector: the current predicted mean\nsqrt_Σ⁻::UpperTriangular: right matrix-square-root of the current predicted covariance matrix\nH::AbstractMatrix: measurement matrix of the state space model\nsqrt_R::UpperTriangular: right matrix square root of measurement noise covariance of the state space model\ny::AbstractVector: a measurement (data point)\nv::AbstractVector (optional): affine control input to the measurement\n\nReferences\n\n[1]: Krämer, N., Bosch, N., Schmidt, J. & Hennig, P. (2022). Probabilistic ODE Solutions in Millions of Dimensions.\n\n\n\n\n\n","category":"function"},{"location":"algorithms/sqrt_kalman_filter/#PhDSE.sqrt_kf_correct!","page":"Square-root Kalman filter","title":"PhDSE.sqrt_kf_correct!","text":"sqrt_kf_correct!(c, H, sqrt_R, y, [v])\n\nIn-place correction step in a square-root Kalman filter. Computes the same posterior distribution as the standard Kalman filter (kf_correct!) but is numerically more stable. Works entirely on right matrix-square-roots of the covariance matrices.\n\nArguments\n\nc::FilteringCache: Cache holding pre-allocated matrices and vectors\nH::AbstractMatrix: measurement matrix of the state space model\nsqrt_R::UpperTriangular: right matrix square root of measurement noise covariance of the state space model\ny::AbstractVector: a measurement (data point)\nv::AbstractVector (optional): affine control input to the measurement\n\nReferences\n\n[1]: Krämer, N., Bosch, N., Schmidt, J. & Hennig, P. (2022). Probabilistic ODE Solutions in Millions of Dimensions.\n\n\n\n\n\n","category":"function"},{"location":"algorithms/kalman_filter/#Kalman-Filter","page":"Kalman Filter","title":"Kalman Filter","text":"","category":"section"},{"location":"algorithms/kalman_filter/#References","page":"Kalman Filter","title":"References","text":"","category":"section"},{"location":"algorithms/kalman_filter/","page":"Kalman Filter","title":"Kalman Filter","text":"[1] Kalman, R. E. (1960). A new approach to linear filtering and prediction problems.","category":"page"},{"location":"algorithms/kalman_filter/#Methods","page":"Kalman Filter","title":"Methods","text":"","category":"section"},{"location":"algorithms/kalman_filter/#KF-Prediction","page":"Kalman Filter","title":"KF Prediction","text":"","category":"section"},{"location":"algorithms/kalman_filter/","page":"Kalman Filter","title":"Kalman Filter","text":"kf_predict\nkf_predict!","category":"page"},{"location":"algorithms/kalman_filter/#PhDSE.kf_predict","page":"Kalman Filter","title":"PhDSE.kf_predict","text":"kf_predict(μ, Σ, Φ, Q, [u])\n\nPrediction step in a Kalman filter.\n\nFor a numerically more stable version of the Kalman filter, have a look at the square-root Kalman filter at sqrt_kf_predict.\n\nArguments\n\nμ::AbstractVector: the current filtering mean\nΣ::AbstractMatrix: the current filtering covariance matrix\nΦ::AbstractMatrix: transition matrix, i.e. dynamics of the state space model\nQ::AbstractMatrix: transition covariance, i.e. process noise of the state space model\nu::AbstractVector (optional): affine control input to the dynamics\n\n\n\n\n\n","category":"function"},{"location":"algorithms/kalman_filter/#PhDSE.kf_predict!","page":"Kalman Filter","title":"PhDSE.kf_predict!","text":"kf_predict!(c, Φ, Q, [u])\n\nIn-place prediction step in a Kalman filter.\n\nFor a numerically more stable version of the Kalman filter, have a look at the square-root Kalman filter at sqrt_kf_predict!.\n\nArguments\n\nc::FilteringCache: Cache holding pre-allocated matrices and vectors\nΦ::AbstractMatrix: transition matrix, i.e. dynamics of the state space model\nQ::AbstractMatrix: transition covariance, i.e. process noise of the state space model\nu::AbstractVector (optional): affine control input to the dynamics\n\n\n\n\n\n","category":"function"},{"location":"algorithms/kalman_filter/#KF-Correction","page":"Kalman Filter","title":"KF Correction","text":"","category":"section"},{"location":"algorithms/kalman_filter/","page":"Kalman Filter","title":"Kalman Filter","text":"kf_correct\nkf_correct!\nkf_joseph_correct","category":"page"},{"location":"algorithms/kalman_filter/#PhDSE.kf_correct","page":"Kalman Filter","title":"PhDSE.kf_correct","text":"kf_correct(μ⁻, Σ⁻, H, R, y, [v])\n\nCorrection step in a Kalman filter.\n\nFor a numerically more stable version of the Kalman filter, either have a look at the Joseph-form implementation kf_joseph_correct or at the square-root Kalman filter at sqrt_kf_correct.\n\nArguments\n\nμ⁻::AbstractVector: the current predicted mean\nΣ⁻::AbstractMatrix: the current predicted covariance matrix\nH::AbstractMatrix: measurement matrix of the state space model\nR::AbstractMatrix: measurement covariance, i.e. measurement noise of the state space model\ny::AbstractVector: a measurement (data point)\nv::AbstractVector (optional): affine control input to the measurements\n\n\n\n\n\n","category":"function"},{"location":"algorithms/kalman_filter/#PhDSE.kf_correct!","page":"Kalman Filter","title":"PhDSE.kf_correct!","text":"kf_correct!(c, H, R, y, [v])\n\nIn-place correction step in a Kalman filter.\n\nFor a numerically more stable version of the Kalman filter, have a look at the square-root Kalman filter at sqrt_kf_correct!.\n\n[2022-12-09] There is currently no in-place implementation of the Joseph-form correction.\n\nArguments\n\nc::FilteringCache: Cache holding pre-allocated matrices and vectors\nH::AbstractMatrix: measurement matrix of the state space model\nR::AbstractMatrix: measurement covariance, i.e. measurement noise of the state space model\ny::AbstractVector: a measurement (data point)\nv::AbstractVector (optional): affine control input to the measurements\n\n\n\n\n\n","category":"function"},{"location":"algorithms/kalman_filter/#PhDSE.kf_joseph_correct","page":"Kalman Filter","title":"PhDSE.kf_joseph_correct","text":"kf_joseph_correct(μ⁻, Σ⁻, H, R, y, [v])\n\nJoseph-form correction step in a Kalman filter.\n\nThis method is numerically more stable than the standard kf_correct and otherwise equivalent.\n\nArguments\n\nμ⁻::AbstractVector: the current predicted mean\nΣ⁻::AbstractMatrix: the current predicted covariance matrix\nH::AbstractMatrix: measurement matrix of the state space model\nR::AbstractMatrix: measurement covariance, i.e. measurement noise of the state space model\ny::AbstractVector: a measurement (data point)\nv::AbstractVector (optional): affine control input to the measurements\n\n\n\n\n\n","category":"function"},{"location":"examples/ensemble_kalman_filter/#Ensemble-Kalman-filter-for-non-linear-dynamics","page":"Ensemble Kalman Filter","title":"Ensemble Kalman filter for non-linear dynamics","text":"","category":"section"},{"location":"examples/ensemble_kalman_filter/","page":"Ensemble Kalman Filter","title":"Ensemble Kalman Filter","text":"using LinearAlgebra\nusing Random\nusing Distributions\nusing ForwardDiff\nusing Plots\n\nusing PhDSE","category":"page"},{"location":"examples/ensemble_kalman_filter/","page":"Ensemble Kalman Filter","title":"Ensemble Kalman Filter","text":"First, define a function that allows us to draw samples from the state-space model.","category":"page"},{"location":"examples/ensemble_kalman_filter/","page":"Ensemble Kalman Filter","title":"Ensemble Kalman Filter","text":"function simulate_nonlinear(\n    f::Function,\n    Q,\n    h::Function,\n    R,\n    μ₀,\n    Σ₀,\n    N::Int;\n    rng = Random.GLOBAL_RNG,\n)\n    x = rand(rng, MvNormal(μ₀, Σ₀))\n    states = [x]\n    observations = []\n\n    for i in 1:N\n        push!(states, rand(rng, MvNormal(f(states[end]), Q(x))))\n        push!(observations, rand(rng, MvNormal(h(states[end]), R(x))))\n    end\n    return states, observations\nend\nnothing  # hide","category":"page"},{"location":"examples/ensemble_kalman_filter/","page":"Ensemble Kalman Filter","title":"Ensemble Kalman Filter","text":"Then, define the actual state-space model:","category":"page"},{"location":"examples/ensemble_kalman_filter/","page":"Ensemble Kalman Filter","title":"Ensemble Kalman Filter","text":"d, D = 1, 2\nμ₀ = [-1.0, 1.0]\nΣ₀ = [0.01 0.0\n    0.0 0.01]\na, b, c = 0.2, 0.2, 3.0\n\nfunction f(x)\n    x1, x2 = x\n    return [\n        x1 + 0.1 * (c * (x1 - x1^3 / 3 + x2)),\n        x2 + 0.1 * (-(1 / c) * (x1 - a - b * x2)),\n    ]\nend\nfunction h(x)\n    return x[1:1]\nend\n\nA(x) = ForwardDiff.jacobian(f, x)\nQ(x) = Matrix{Float64}(0.001 * I(D))\nH(x) = Matrix{Float64}(I(D))[1:1, :]\nR(x) = Matrix{Float64}(I(d))\nu(x) = f(x) - A(x) * x\nv(x) = zeros(d)\n\nnothing  # hide","category":"page"},{"location":"examples/ensemble_kalman_filter/","page":"Ensemble Kalman Filter","title":"Ensemble Kalman Filter","text":"Next, generate an example state trajectory and according measurements.","category":"page"},{"location":"examples/ensemble_kalman_filter/","page":"Ensemble Kalman Filter","title":"Ensemble Kalman Filter","text":"N = 200\nground_truth, observations = simulate_nonlinear(f, Q, h, R, μ₀, Σ₀, N)\nnothing  # hide","category":"page"},{"location":"examples/ensemble_kalman_filter/","page":"Ensemble Kalman Filter","title":"Ensemble Kalman Filter","text":"Setup for the EnKF:","category":"page"},{"location":"examples/ensemble_kalman_filter/","page":"Ensemble Kalman Filter","title":"Ensemble Kalman Filter","text":"ENSEMBLE_SIZE = 200\ninit_dist = MvNormal(μ₀, Σ₀)\nprocess_noise_dist(x) = MvNormal(zero(x), Q(x))\nmeasurement_noise_dist(x) = MvNormal(zero(x), R(x))\nnothing  # hide","category":"page"},{"location":"examples/ensemble_kalman_filter/","page":"Ensemble Kalman Filter","title":"Ensemble Kalman Filter","text":"Compute the filtering posterior...","category":"page"},{"location":"examples/ensemble_kalman_filter/","page":"Ensemble Kalman Filter","title":"Ensemble Kalman Filter","text":"ensemble = rand(init_dist, ENSEMBLE_SIZE)\nenkf_cache = init_cache_ensemble!(FilteringCache(), ensemble)\nenkf_traj = [(copy(μ₀), copy(Σ₀))]\nfor y in observations\n    enkf_m, enkf_C = enkf_traj[end]\n    enkf_ensemble = enkf_predict!(\n        enkf_cache,\n        A(enkf_m),\n        process_noise_dist(enkf_m),\n        u(enkf_m),\n    )\n\n    enkf_m, enkf_C = ensemble_mean_cov(enkf_ensemble)\n\n    enkf_ensemble = enkf_correct!(\n        enkf_cache,\n        H(enkf_m),\n        measurement_noise_dist(y),\n        y,\n        v(enkf_m),\n    )\n\n    enkf_m, enkf_C = ensemble_mean_cov(enkf_ensemble)\n\n    push!(enkf_traj, (copy(enkf_m), copy(enkf_C)))\nend\nnothing  # hide","category":"page"},{"location":"examples/ensemble_kalman_filter/","page":"Ensemble Kalman Filter","title":"Ensemble Kalman Filter","text":"... and plot the results:","category":"page"},{"location":"examples/ensemble_kalman_filter/","page":"Ensemble Kalman Filter","title":"Ensemble Kalman Filter","text":"enkf_means = [m for (m, C) in enkf_traj]\nenkf_stds = [2sqrt.(diag(C)) for (m, C) in enkf_traj]\n\nplot_x1 = scatter(1:length(observations), [o[1] for o in observations], color = 1, label=\"data\")\nplot!(plot_x1, 1:length(ground_truth), [gt[1] for gt in ground_truth], label=\"gt\", color=:black, lw=5, alpha=0.6)\nplot_x2 = plot(1:length(ground_truth), [gt[2] for gt in ground_truth], label=\"gt\", color=:black, lw=5, alpha=0.6)\nplot!(\n    plot_x1,\n    1:length(enkf_means),\n    [m[1] for m in enkf_means],\n    ribbon = [s[1] for s in enkf_stds],\n    label = \"EnKF mean\",\n    color = 3,\n    lw = 3,\n)\nplot!(\n    plot_x2,\n    1:length(enkf_means),\n    [m[2] for m in enkf_means],\n    ribbon = [s[2] for s in enkf_stds],\n    label = \"EnKF mean\",\n    color = 3,\n    lw = 3,\n)\nres_plot = plot(plot_x1, plot_x2, layout = (1, 2))\nsavefig(res_plot, \"ensemble_kalman_filter_example.svg\")\nnothing  # hide","category":"page"},{"location":"examples/ensemble_kalman_filter/","page":"Ensemble Kalman Filter","title":"Ensemble Kalman Filter","text":"(Image: )","category":"page"},{"location":"algorithms/ensemble_kalman_filter/#Ensemble-Kalman-Filter","page":"Ensemble Kalman filter","title":"Ensemble Kalman Filter","text":"","category":"section"},{"location":"algorithms/ensemble_kalman_filter/#References","page":"Ensemble Kalman filter","title":"References","text":"","category":"section"},{"location":"algorithms/ensemble_kalman_filter/","page":"Ensemble Kalman filter","title":"Ensemble Kalman filter","text":"[1] Mandel, J. (2006). Efficient Implementation of the Ensemble Kalman Filter.\n[2] M. Katzfuss, J. R. Stroud, and C. K. Wikle, “Understanding the Ensemble Kalman Filter,” The American Statistician, vol. 70, no. 4, pp. 350–357,  2016.","category":"page"},{"location":"algorithms/ensemble_kalman_filter/#Methods","page":"Ensemble Kalman filter","title":"Methods","text":"","category":"section"},{"location":"algorithms/ensemble_kalman_filter/#EnKF-Prediction","page":"Ensemble Kalman filter","title":"EnKF Prediction","text":"","category":"section"},{"location":"algorithms/ensemble_kalman_filter/","page":"Ensemble Kalman filter","title":"Ensemble Kalman filter","text":"enkf_predict\nenkf_predict!","category":"page"},{"location":"algorithms/ensemble_kalman_filter/#PhDSE.enkf_predict","page":"Ensemble Kalman filter","title":"PhDSE.enkf_predict","text":"enkf_predict(ensemble, Φ, process_noise_dist, [u])\n\nPrediction step in an Ensemble Kalman filter (EnKF).\n\nArguments\n\nensemble::AbstractMatrix: the current analysis ensemble\nΦ::AbstractMatrix: transition matrix, i.e. dynamics of the state space model\nprocess_noise_dist::MvNormal: Multivariate Gaussian process-noise distribution.\nu::AbstractVector (optional): affine control input to the dynamics\n\nReferences\n\n[1] Mandel, J. (2006). Efficient Implementation of the Ensemble Kalman Filter.\n\n\n\n\n\n","category":"function"},{"location":"algorithms/ensemble_kalman_filter/#PhDSE.enkf_predict!","page":"Ensemble Kalman filter","title":"PhDSE.enkf_predict!","text":"enkf_predict!(c, Φ, process_noise_dist, [u])\n\nIn-place prediction step in an Ensemble Kalman filter (EnKF).\n\nArguments\n\nc::FilteringCache: Cache holding pre-allocated matrices and vectors\nΦ::AbstractMatrix: transition matrix, i.e. dynamics of the state space model\nprocess_noise_dist::MvNormal: Multivariate Gaussian process-noise distribution.\nu::AbstractVector (optional): affine control input to the dynamics\n\nReferences\n\n[1] Mandel, J. (2006). Efficient Implementation of the Ensemble Kalman Filter.\n\n\n\n\n\n","category":"function"},{"location":"algorithms/ensemble_kalman_filter/#EnKF-Correction","page":"Ensemble Kalman filter","title":"EnKF Correction","text":"","category":"section"},{"location":"algorithms/ensemble_kalman_filter/","page":"Ensemble Kalman filter","title":"Ensemble Kalman filter","text":"enkf_correct\nenkf_correct!","category":"page"},{"location":"algorithms/ensemble_kalman_filter/#PhDSE.enkf_correct","page":"Ensemble Kalman filter","title":"PhDSE.enkf_correct","text":"enkf_correct(forecast_ensemble, H, measurement_noise_dist, y, [v])\n\nCorrection step in an Ensemble Kalman filter (EnKF).\n\nArguments\n\nforecast_ensemble::AbstractMatrix: the current forecast ensemble\nH::AbstractMatrix: measurement matrix of the state space model\nmeasurement_noise_dist::MvNormal: Multivariate Gaussian measurement-noise distribution.\ny::AbstractVector: a measurement (data point)\nv::AbstractVector (optional): affine control input to the measurement\n\nReferences\n\n[1] Mandel, J. (2006). Efficient Implementation of the Ensemble Kalman Filter. Section 2.\n\n\n\n\n\n","category":"function"},{"location":"algorithms/ensemble_kalman_filter/#PhDSE.enkf_correct!","page":"Ensemble Kalman filter","title":"PhDSE.enkf_correct!","text":"enkf_correct!(c, H, measurement_noise_dist, y, [v])\n\nIn-place correction step in an Ensemble Kalman filter (EnKF).\n\nArguments\n\nc::FilteringCache: Cache holding pre-allocated matrices and vectors\nH::AbstractMatrix: measurement matrix of the state space model\nmeasurement_noise_dist::MvNormal: Multivariate Gaussian measurement-noise distribution.\ny::AbstractVector: a measurement (data point)\nv::AbstractVector (optional): affine control input to the measurement\n\nReferences\n\n[1] Mandel, J. (2006). Efficient Implementation of the Ensemble Kalman Filter. Section 2.\n\n\n\n\n\n","category":"function"},{"location":"algorithms/ensemble_kalman_filter/#Observation-matrix-free-version","page":"Ensemble Kalman filter","title":"Observation-matrix-free version","text":"","category":"section"},{"location":"algorithms/ensemble_kalman_filter/","page":"Ensemble Kalman filter","title":"Ensemble Kalman filter","text":"enkf_matrixfree_correct\nenkf_matrixfree_correct!","category":"page"},{"location":"algorithms/ensemble_kalman_filter/#PhDSE.enkf_matrixfree_correct","page":"Ensemble Kalman filter","title":"PhDSE.enkf_matrixfree_correct","text":"enkf_matrixfree_correct(forecast_ensemble, HX, HA, measurement_noise_dist, y; [A], [R_inverse])\n\nObservation-matrix-free correction step in an Ensemble Kalman filter (EnKF).\n\nArguments\n\nforecast_ensemble::AbstractMatrix: the current forecast ensemble\nHX::AbstractMatrix: measured forecast ensemble\nHA::AbstractMatrix: measured and centered forecast ensemble\nmeasurement_noise_dist::MvNormal: Multivariate Gaussian measurement-noise distribution.\ny::AbstractVector: a measurement (data point)\nA::AbstractMatrix (optional): centered forecast ensemble\nR_inverse::AbstractMatrix (optional): the inverse R^-1 of the measurement covariance matrix.   missing per default.   If R_inverse is not missing, then an alternative computation of the analysis ensemble is chosen, which uses   the matrix-inversion lemma to scale as O(N^3), instead of O(d^3)!\n\nReferences\n\n[1] Mandel, J. (2006). Efficient Implementation of the Ensemble Kalman Filter. Sections 3, 4.\n\n\n\n\n\n","category":"function"},{"location":"algorithms/ensemble_kalman_filter/#PhDSE.enkf_matrixfree_correct!","page":"Ensemble Kalman filter","title":"PhDSE.enkf_matrixfree_correct!","text":"enkf_matrixfree_correct!(c, HX, HA, A, measurement_noise_dist, y; [R_inverse])\n\nIn-place observation-matrix-free correction step in an Ensemble Kalman filter (EnKF).\n\nNote: The arguments A, HX, HA can be computed using A_HX_HA!\n\nArguments\n\nc::FilteringCache: Cache holding pre-allocated matrices and vectors\nHX::AbstractMatrix: measured forecast ensemble mathrmHmathrmX + v\nHA::AbstractMatrix: measured and centered forecast ensemble mathrmHmathrmA + v\nA::AbstractMatrix: centered forecast ensemble mathrmA = mathrmX - barmathrmX\nmeasurement_noise_dist::MvNormal: Multivariate Gaussian measurement-noise distribution.\ny::AbstractVector: a measurement (data point)\nR_inverse::AbstractMatrix (optional): the inverse R^-1 of the measurement covariance matrix. missing per default.  If R_inverse is not missing, then an alternative computation of the analysis ensemble is chosen, which uses  the matrix-inversion lemma to scale as O(N^3), instead of O(d^3)!\n\nReferences\n\n[1] Mandel, J. (2006). Efficient Implementation of the Ensemble Kalman Filter. Sections 3, 4.\n\n\n\n\n\n","category":"function"},{"location":"algorithms/ensemble_kalman_filter/#Auxiliary-methods","page":"Ensemble Kalman filter","title":"Auxiliary methods","text":"","category":"section"},{"location":"algorithms/ensemble_kalman_filter/#Compute-moments-from-an-ensemble","page":"Ensemble Kalman filter","title":"Compute moments from an ensemble","text":"","category":"section"},{"location":"algorithms/ensemble_kalman_filter/","page":"Ensemble Kalman filter","title":"Ensemble Kalman filter","text":"ensemble_mean\nensemble_mean!\ncentered_ensemble\ncentered_ensemble!\nensemble_cov\nensemble_mean_cov\nensemble_mean_cov!","category":"page"},{"location":"algorithms/ensemble_kalman_filter/#PhDSE.ensemble_mean","page":"Ensemble Kalman filter","title":"PhDSE.ensemble_mean","text":"ensemble_mean(ens)\n\nCompute the mean barmathrmX of an ensemble of states mathrmX in mathbbR^D times N\n\n\n\n\n\n","category":"function"},{"location":"algorithms/ensemble_kalman_filter/#PhDSE.ensemble_mean!","page":"Ensemble Kalman filter","title":"PhDSE.ensemble_mean!","text":"ensemble_mean!(out_m, ens)\n\nCompute the mean barmathrmX of an ensemble of states mathrmX in mathbbR^D times N\n\n\n\n\n\n","category":"function"},{"location":"algorithms/ensemble_kalman_filter/#PhDSE.centered_ensemble","page":"Ensemble Kalman filter","title":"PhDSE.centered_ensemble","text":"centered_ensemble(ens)\n\nCompute the mean-centered ensemble mathrmA = mathrmX - barmathrmX\n\n\n\n\n\n","category":"function"},{"location":"algorithms/ensemble_kalman_filter/#PhDSE.centered_ensemble!","page":"Ensemble Kalman filter","title":"PhDSE.centered_ensemble!","text":"centered_ensemble!(out_ens, out_m, ens)\n\nCompute the mean-centered ensemble mathrmA = mathrmX - barmathrmX\n\n\n\n\n\n","category":"function"},{"location":"algorithms/ensemble_kalman_filter/#PhDSE.ensemble_cov","page":"Ensemble Kalman filter","title":"PhDSE.ensemble_cov","text":"ensemble_cov(ens)\n\nCompute the sample covariance of an ensemble tildemathrmC = fracmathrmAmathrmA^topN - 1\n\n\n\n\n\n","category":"function"},{"location":"algorithms/ensemble_kalman_filter/#PhDSE.ensemble_mean_cov","page":"Ensemble Kalman filter","title":"PhDSE.ensemble_mean_cov","text":"ensemble_mean_cov(ens)\n\nCompute sample moments of an ensemble as in ensemble_mean and ensemble_cov.\n\n\n\n\n\n","category":"function"},{"location":"algorithms/ensemble_kalman_filter/#PhDSE.ensemble_mean_cov!","page":"Ensemble Kalman filter","title":"PhDSE.ensemble_mean_cov!","text":"ensemble_mean_cov!(out_cov, out_ens, out_m, ens)\n\nCompute sample moments of an ensemble. See ensemble_mean_cov.\n\n\n\n\n\n","category":"function"},{"location":"algorithms/ensemble_kalman_filter/#Misc.","page":"Ensemble Kalman filter","title":"Misc.","text":"","category":"section"},{"location":"algorithms/ensemble_kalman_filter/","page":"Ensemble Kalman filter","title":"Ensemble Kalman filter","text":"PhDSE.A_HX_HA!","category":"page"},{"location":"algorithms/ensemble_kalman_filter/#PhDSE.A_HX_HA!","page":"Ensemble Kalman filter","title":"PhDSE.A_HX_HA!","text":"A_HX_HA!(c, H, [v])\n\nIn-place computation of measured forecast ensemble HX, as well as measured centered forecast ensemble HA and centered forecast ensemble A.\n\nNote: not exported. Use as PhDSE.A_HX_HA!.\n\nArguments\n\nc::FilteringCache: Cache holding pre-allocated matrices and vectors\nH::AbstractMatrix: measurement matrix of the state space model\nv::AbstractVector (optional): affine control input to the measurement\n\n\n\n\n\n","category":"function"},{"location":"#PhDSE.jl","page":"Home","title":"PhDSE.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: gh-badge)","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"PhDSE stands for Probabilistic high-Dimensional State Estimation. Its aim is to provide runtime- and memory-efficient implementations of inference algorithms in probabilistic state-space models - all implemented in Julia.","category":"page"},{"location":"#Install","page":"Home","title":"Install","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package is in a very early phase of development and will likely be subject to significant changes in both the interface, as well as the inner workings. Therefore, it is for now not registered as a Julia package, yet.","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you feel like playing around with the package a bit then you can install it directly from GitHub like this:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg\njulia> Pkg.add(url=\"https://github.com/schmidtjonathan/PhDSE.jl.git\")","category":"page"},{"location":"examples/kalman_filter/#Kalman-filter-for-non-linear-dynamics","page":"Kalman Filter","title":"Kalman filter for non-linear dynamics","text":"","category":"section"},{"location":"examples/kalman_filter/","page":"Kalman Filter","title":"Kalman Filter","text":"using LinearAlgebra\nusing Random\nusing Distributions\nusing ForwardDiff\nusing Plots\n\nusing PhDSE","category":"page"},{"location":"examples/kalman_filter/","page":"Kalman Filter","title":"Kalman Filter","text":"First, define a function that allows us to draw samples from the state-space model.","category":"page"},{"location":"examples/kalman_filter/","page":"Kalman Filter","title":"Kalman Filter","text":"function simulate_nonlinear(\n    f::Function,\n    Q,\n    h::Function,\n    R,\n    μ₀,\n    Σ₀,\n    N::Int;\n    rng = Random.GLOBAL_RNG,\n)\n    x = rand(rng, MvNormal(μ₀, Σ₀))\n    states = [x]\n    observations = []\n\n    for i in 1:N\n        push!(states, rand(rng, MvNormal(f(states[end]), Q(x))))\n        push!(observations, rand(rng, MvNormal(h(states[end]), R(x))))\n    end\n    return states, observations\nend\nnothing  # hide","category":"page"},{"location":"examples/kalman_filter/","page":"Kalman Filter","title":"Kalman Filter","text":"Then, define the actual state-space model:","category":"page"},{"location":"examples/kalman_filter/","page":"Kalman Filter","title":"Kalman Filter","text":"d, D = 1, 2\nμ₀ = [-1.0, 1.0]\nΣ₀ = [0.01 0.0\n    0.0 0.01]\na, b, c = 0.2, 0.2, 3.0\n\nfunction f(x)\n    x1, x2 = x\n    return [\n        x1 + 0.1 * (c * (x1 - x1^3 / 3 + x2)),\n        x2 + 0.1 * (-(1 / c) * (x1 - a - b * x2)),\n    ]\nend\nfunction h(x)\n    return x[1:1]\nend\n\nA(x) = ForwardDiff.jacobian(f, x)\nQ(x) = Matrix{Float64}(0.001 * I(D))\nH(x) = Matrix{Float64}(I(D))[1:1, :]\nR(x) = Matrix{Float64}(I(d))\nu(x) = f(x) - A(x) * x\nv(x) = zeros(d)\n\nnothing  # hide","category":"page"},{"location":"examples/kalman_filter/","page":"Kalman Filter","title":"Kalman Filter","text":"Next, generate an example state trajectory and according measurements.","category":"page"},{"location":"examples/kalman_filter/","page":"Kalman Filter","title":"Kalman Filter","text":"N = 200\nground_truth, observations = simulate_nonlinear(f, Q, h, R, μ₀, Σ₀, N)\nnothing  # hide","category":"page"},{"location":"examples/kalman_filter/","page":"Kalman Filter","title":"Kalman Filter","text":"Compute the filtering posterior...","category":"page"},{"location":"examples/kalman_filter/","page":"Kalman Filter","title":"Kalman Filter","text":"cache = init_cache_moments!(FilteringCache(), μ₀, Σ₀)\nkf_traj = [(copy(μ₀), copy(Σ₀))]\nfor y in observations\n    kf_m, kf_C = kf_traj[end]\n    kf_m, kf_C = kf_predict!(\n        cache,\n        A(kf_m),\n        Q(kf_m),\n        u(kf_m),\n    )\n\n    kf_m, kf_C = kf_correct!(\n        cache,\n        H(kf_m),\n        R(y),\n        y,\n        v(kf_m),\n    )\n\n    push!(kf_traj, (copy(kf_m), copy(kf_C)))\nend\nnothing  # hide","category":"page"},{"location":"examples/kalman_filter/","page":"Kalman Filter","title":"Kalman Filter","text":"... and plot the results:","category":"page"},{"location":"examples/kalman_filter/","page":"Kalman Filter","title":"Kalman Filter","text":"kf_means = [m for (m, C) in kf_traj]\nkf_stds = [2sqrt.(diag(C)) for (m, C) in kf_traj]\n\nplot_x1 = scatter(1:length(observations), [o[1] for o in observations], color = 1, label=\"data\")\nplot!(plot_x1, 1:length(ground_truth), [gt[1] for gt in ground_truth], label=\"gt\", color=:black, lw=5, alpha=0.6)\nplot_x2 = plot(1:length(ground_truth), [gt[2] for gt in ground_truth], label=\"gt\", color=:black, lw=5, alpha=0.6)\nplot!(\n    plot_x1,\n    1:length(kf_means),\n    [m[1] for m in kf_means],\n    ribbon = [s[1] for s in kf_stds],\n    label = \"KF mean\",\n    color = 3,\n    lw = 3,\n)\nplot!(\n    plot_x2,\n    1:length(kf_means),\n    [m[2] for m in kf_means],\n    ribbon = [s[2] for s in kf_stds],\n    label = \"KF mean\",\n    color = 3,\n    lw = 3,\n)\nres_plot = plot(plot_x1, plot_x2, layout = (1, 2))\nsavefig(res_plot, \"kalman_filter_example.svg\")\nnothing  # hide","category":"page"},{"location":"examples/kalman_filter/","page":"Kalman Filter","title":"Kalman Filter","text":"(Image: )","category":"page"},{"location":"examples/sqrt_kalman_filter/#Square-root-Kalman-filter-for-non-linear-dynamics","page":"Square-root Kalman Filter","title":"Square-root Kalman filter for non-linear dynamics","text":"","category":"section"},{"location":"examples/sqrt_kalman_filter/","page":"Square-root Kalman Filter","title":"Square-root Kalman Filter","text":"using LinearAlgebra\nusing Random\nusing Distributions\nusing ForwardDiff\nusing Plots\n\nusing PhDSE","category":"page"},{"location":"examples/sqrt_kalman_filter/","page":"Square-root Kalman Filter","title":"Square-root Kalman Filter","text":"First, define a function that allows us to draw samples from the state-space model.","category":"page"},{"location":"examples/sqrt_kalman_filter/","page":"Square-root Kalman Filter","title":"Square-root Kalman Filter","text":"function simulate_nonlinear(\n    f::Function,\n    Q,\n    h::Function,\n    R,\n    μ₀,\n    Σ₀,\n    N::Int;\n    rng = Random.GLOBAL_RNG,\n)\n    x = rand(rng, MvNormal(μ₀, Σ₀))\n    states = [x]\n    observations = []\n\n    for i in 1:N\n        push!(states, rand(rng, MvNormal(f(states[end]), Q(x))))\n        push!(observations, rand(rng, MvNormal(h(states[end]), R(x))))\n    end\n    return states, observations\nend\n\nupper_sqrt_to_mat(MU::UpperTriangular) = MU' * MU\n\nnothing  # hide","category":"page"},{"location":"examples/sqrt_kalman_filter/","page":"Square-root Kalman Filter","title":"Square-root Kalman Filter","text":"Then, define the actual state-space model:","category":"page"},{"location":"examples/sqrt_kalman_filter/","page":"Square-root Kalman Filter","title":"Square-root Kalman Filter","text":"d, D = 1, 2\nμ₀ = [-1.0, 1.0]\nΣ₀ = [0.01 0.0\n    0.0 0.01]\na, b, c = 0.2, 0.2, 3.0\n\nfunction f(x)\n    x1, x2 = x\n    return [\n        x1 + 0.1 * (c * (x1 - x1^3 / 3 + x2)),\n        x2 + 0.1 * (-(1 / c) * (x1 - a - b * x2)),\n    ]\nend\nfunction h(x)\n    return x[1:1]\nend\n\nA(x) = ForwardDiff.jacobian(f, x)\nQ(x) = Matrix{Float64}(0.001 * I(D))\nH(x) = Matrix{Float64}(I(D))[1:1, :]\nR(x) = Matrix{Float64}(I(d))\nu(x) = f(x) - A(x) * x\nv(x) = zeros(d)\n\nnothing  # hide","category":"page"},{"location":"examples/sqrt_kalman_filter/","page":"Square-root Kalman Filter","title":"Square-root Kalman Filter","text":"Next, generate an example state trajectory and according measurements.","category":"page"},{"location":"examples/sqrt_kalman_filter/","page":"Square-root Kalman Filter","title":"Square-root Kalman Filter","text":"N = 200\nground_truth, observations = simulate_nonlinear(f, Q, h, R, μ₀, Σ₀, N)\nnothing  # hide","category":"page"},{"location":"examples/sqrt_kalman_filter/","page":"Square-root Kalman Filter","title":"Square-root Kalman Filter","text":"Compute the filtering posterior...","category":"page"},{"location":"examples/sqrt_kalman_filter/","page":"Square-root Kalman Filter","title":"Square-root Kalman Filter","text":"cache = init_cache_moments!(FilteringCache(), μ₀, cholesky(Σ₀).U)\nkf_traj = [(copy(μ₀), copy(Σ₀))]\nfor y in observations\n    kf_m, kf_C = kf_traj[end]\n    kf_sqrt_C = cholesky(kf_C).U\n    kf_m, kf_sqrt_C = sqrt_kf_predict!(\n        cache,\n        A(kf_m),\n        cholesky(Q(kf_m)).U,\n        u(kf_m),\n    )\n\n    kf_m, kf_sqrt_C = sqrt_kf_correct!(\n        cache,\n        H(kf_m),\n        cholesky(R(y)).U,\n        y,\n        v(kf_m),\n    )\n\n    push!(kf_traj, (copy(kf_m), upper_sqrt_to_mat(kf_sqrt_C)))\nend\nnothing  # hide","category":"page"},{"location":"examples/sqrt_kalman_filter/","page":"Square-root Kalman Filter","title":"Square-root Kalman Filter","text":"... and plot the results:","category":"page"},{"location":"examples/sqrt_kalman_filter/","page":"Square-root Kalman Filter","title":"Square-root Kalman Filter","text":"kf_means = [m for (m, C) in kf_traj]\nkf_stds = [2sqrt.(diag(C)) for (m, C) in kf_traj]\n\nplot_x1 = scatter(1:length(observations), [o[1] for o in observations], color = 1, label=\"data\")\nplot!(plot_x1, 1:length(ground_truth), [gt[1] for gt in ground_truth], label=\"gt\", color=:black, lw=5, alpha=0.6)\nplot_x2 = plot(1:length(ground_truth), [gt[2] for gt in ground_truth], label=\"gt\", color=:black, lw=5, alpha=0.6)\nplot!(\n    plot_x1,\n    1:length(kf_means),\n    [m[1] for m in kf_means],\n    ribbon = [s[1] for s in kf_stds],\n    label = \"Sqrt-KF mean\",\n    color = 3,\n    lw = 3,\n)\nplot!(\n    plot_x2,\n    1:length(kf_means),\n    [m[2] for m in kf_means],\n    ribbon = [s[2] for s in kf_stds],\n    label = \"Sqrt-KF mean\",\n    color = 3,\n    lw = 3,\n)\nres_plot = plot(plot_x1, plot_x2, layout = (1, 2))\nsavefig(res_plot, \"sqrt_kalman_filter_example.svg\")\nnothing  # hide","category":"page"},{"location":"examples/sqrt_kalman_filter/","page":"Square-root Kalman Filter","title":"Square-root Kalman Filter","text":"(Image: )","category":"page"}]
}
