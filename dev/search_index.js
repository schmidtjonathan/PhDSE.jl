var documenterSearchIndex = {"docs":
[{"location":"algorithms/sqrt_kalman_filter/#Square-root-Kalman-Filter","page":"Square-root Kalman filter","title":"Square-root Kalman Filter","text":"","category":"section"},{"location":"algorithms/sqrt_kalman_filter/#References","page":"Square-root Kalman filter","title":"References","text":"","category":"section"},{"location":"algorithms/sqrt_kalman_filter/","page":"Square-root Kalman filter","title":"Square-root Kalman filter","text":"[1] Mohinder S Grewal and Angus P Andrews. Kalman filtering: Theory and Practice with MATLAB. John Wiley & Sons, 2014.\n[2] Krämer, N., & Hennig, P. (2020). Stable implementation of probabilistic ODE solvers. arXiv:2012.10106.","category":"page"},{"location":"algorithms/sqrt_kalman_filter/#Methods","page":"Square-root Kalman filter","title":"Methods","text":"","category":"section"},{"location":"algorithms/sqrt_kalman_filter/","page":"Square-root Kalman filter","title":"Square-root Kalman filter","text":"sqrt_kf_predict!\nsqrt_kf_correct!","category":"page"},{"location":"algorithms/sqrt_kalman_filter/#PhDSE.sqrt_kf_predict!","page":"Square-root Kalman filter","title":"PhDSE.sqrt_kf_predict!","text":"sqrt_kf_predict!(fcache, Φ, Q, [u])\n\nEfficient and in-place implementation of the prediction step in a square-root Kalman filter. Computes the same posterior distribution as the standard Kalman filter (kf_predict!) but is numerically more stable. Works entirely on matrix-square-roots of the covariance matrices.\n\nArguments\n\nfcache::SqrtKFCache: a cache holding memory-heavy objects\nΦ::AbstractMatrix: transition matrix, i.e. dynamics of the state space model\nQ::PSDMatrix: right matrix square root of transition covariance, i.e. process noise of the state space model\nu::AbstractVector (optional): affine control input to the dynamics\n\nReferences\n\n[1] Krämer, N., & Hennig, P. (2020). Stable implementation of probabilistic ODE solvers.\n\n\n\n\n\n","category":"function"},{"location":"algorithms/sqrt_kalman_filter/#PhDSE.sqrt_kf_correct!","page":"Square-root Kalman filter","title":"PhDSE.sqrt_kf_correct!","text":"sqrt_kf_correct!(fcache, H, R, y, [v])\n\nEfficient and in-place implementation of the correction step in a square-root Kalman filter. Computes the same posterior distribution as the standard Kalman filter (kf_correct!) but is numerically more stable. Works entirely on matrix-square-roots of the covariance matrices.\n\nArguments\n\nfcache::SqrtKFCache: a cache holding memory-heavy objects\ny::AbstractVector: a measurement (data point)\nH::AbstractMatrix: measurement matrix of the state space model\nR::PSDMatrix: right matrix square root of measurement noise covariance of the state space model\nv::AbstractVector (optional): affine control input to the measurement\n\nReferences\n\n[1]: Krämer, N., Bosch, N., Schmidt, J. & Hennig, P. (2022). Probabilistic ODE Solutions in Millions of Dimensions.\n\n\n\n\n\n","category":"function"},{"location":"algorithms/kalman_filter/#Kalman-Filter","page":"Kalman Filter","title":"Kalman Filter","text":"","category":"section"},{"location":"algorithms/kalman_filter/#References","page":"Kalman Filter","title":"References","text":"","category":"section"},{"location":"algorithms/kalman_filter/","page":"Kalman Filter","title":"Kalman Filter","text":"[1] Kalman, R. E. (1960). A new approach to linear filtering and prediction problems.","category":"page"},{"location":"algorithms/kalman_filter/#Methods","page":"Kalman Filter","title":"Methods","text":"","category":"section"},{"location":"algorithms/kalman_filter/","page":"Kalman Filter","title":"Kalman Filter","text":"kf_predict!\nkf_correct!","category":"page"},{"location":"algorithms/kalman_filter/#PhDSE.kf_predict!","page":"Kalman Filter","title":"PhDSE.kf_predict!","text":"kf_predict!(fcache, Φ, Q, [u])\n\nEfficient and in-place implementation of the prediction step in a Kalman filter.\n\nFor a numerically more stable version of the Kalman filter, have a look at the square-root Kalman filter at sqrt_kf_predict!.\n\nArguments\n\nfcache::KFCache: a cache holding memory-heavy objects\nΦ::AbstractMatrix: transition matrix, i.e. dynamics of the state space model\nQ::AbstractMatrix: transition covariance, i.e. process noise of the state space model\nu::AbstractVector (optional): affine control input to the dynamics\n\n\n\n\n\n","category":"function"},{"location":"algorithms/kalman_filter/#PhDSE.kf_correct!","page":"Kalman Filter","title":"PhDSE.kf_correct!","text":"kf_correct!(fcache, H, R, y, [v])\n\nEfficient and in-place implementation of the correction step in a Kalman filter.\n\nFor a numerically more stable version of the Kalman filter, have a look at the square-root Kalman filter at sqrt_kf_correct!.\n\nArguments\n\nfcache::KFCache: a cache holding memory-heavy objects\nH::AbstractMatrix: measurement matrix of the state space model\nR::AbstractMatrix: measurement noise covariance of the state space model\ny::AbstractVector: a measurement (data point)\nv::AbstractVector (optional): affine control input to the measurement\n\n\n\n\n\n","category":"function"},{"location":"examples/ensemble_kalman_filter/#Ensemble-Kalman-filter-for-car-tracking","page":"Ensemble Kalman Filter","title":"Ensemble Kalman filter for car tracking","text":"","category":"section"},{"location":"examples/ensemble_kalman_filter/","page":"Ensemble Kalman Filter","title":"Ensemble Kalman Filter","text":"From \"Bayesian Filtering and Smoothing\" [1], example 4.3.","category":"page"},{"location":"examples/ensemble_kalman_filter/","page":"Ensemble Kalman Filter","title":"Ensemble Kalman Filter","text":"using LinearAlgebra\nusing Random\nusing Distributions\nusing Statistics\n\nusing Plots\n\nusing PhDSE","category":"page"},{"location":"examples/ensemble_kalman_filter/","page":"Ensemble Kalman Filter","title":"Ensemble Kalman Filter","text":"First, set up the state space model.","category":"page"},{"location":"examples/ensemble_kalman_filter/","page":"Ensemble Kalman Filter","title":"Ensemble Kalman Filter","text":"function simulate(Φ, Q, u, H, R, v, μ₀, Σ₀, N; rng = Random.GLOBAL_RNG)\n    x = rand(rng, MvNormal(μ₀, Σ₀))\n    states = [x]\n    observations = []\n\n    for i in 1:N\n        push!(states, rand(rng, MvNormal(Φ * states[end] + u, Q)))\n        push!(observations, rand(rng, MvNormal(H * states[end] + v, R)))\n    end\n    return states, observations\nend\n\n\ndt = 0.1\ns1, s2 = 0.5, 0.5\nq1, q2 = 1, 1\n\nA = [1 0 dt 0;\n     0 1 0 dt;\n     0 0 1 0;\n     0 0 0 1]\n\nQ = [q1*dt^3/3 0 q1*dt^2/2 0;\n     0 q2*dt^3/3 0 q2*dt^2/2;\n     q1*dt^2/2 0 q1*dt 0;\n     0 q2*dt^2/2 0 q2*dt]\n\nH = [1 0 0 0; 0 1 0 0]\n\nd, D = size(H)\nN = 20\n\nR = [s1^2 0; 0 s2^2]\nR_inv = inv(R)\n\nμ₀, Σ₀ = zeros(D), 2 * Matrix(1e-5 * I, D, D)\nnothing # hide","category":"page"},{"location":"examples/ensemble_kalman_filter/","page":"Ensemble Kalman Filter","title":"Ensemble Kalman Filter","text":"Next, generate an example state trajectory and according measurements.","category":"page"},{"location":"examples/ensemble_kalman_filter/","page":"Ensemble Kalman Filter","title":"Ensemble Kalman Filter","text":"ground_truth, data = simulate(A, Q, zeros(D), H, R, zeros(d), μ₀, Σ₀, 200, rng=MersenneTwister(3))\nnothing # hide","category":"page"},{"location":"examples/ensemble_kalman_filter/","page":"Ensemble Kalman Filter","title":"Ensemble Kalman Filter","text":"Compute the filtering posterior.","category":"page"},{"location":"examples/ensemble_kalman_filter/","page":"Ensemble Kalman Filter","title":"Ensemble Kalman Filter","text":"sol = [(μ₀, sqrt.(diag(Σ₀)))]\nfcache = EnKFCache(\n    D,\n    d,\n    ensemble_size = N,\n    process_noise_dist = MvNormal(zeros(D), Q),\n    observation_noise_dist = MvNormal(zeros(d), R),\n)\ninit_ensemble = rand(MvNormal(μ₀, Σ₀), N)\ncopy!(fcache.ensemble, init_ensemble)\n\nfor y in data\n    enkf_predict!(fcache, A)\n    enkf_correct!(fcache, H, R_inv, y)\n    push!(\n        sol,\n        (\n            mean(eachcol(fcache.ensemble)),\n            sqrt.(diag(cov(fcache.ensemble, dims=2))),\n        )\n    )\nend\nnothing # hide","category":"page"},{"location":"examples/ensemble_kalman_filter/","page":"Ensemble Kalman Filter","title":"Ensemble Kalman Filter","text":"Finally, plot the results.","category":"page"},{"location":"examples/ensemble_kalman_filter/","page":"Ensemble Kalman Filter","title":"Ensemble Kalman Filter","text":"scatter([y[1] for y in data], [y[2] for y in data], label=\"Measurements\", markersize=2)\nplot!([y[1] for y in ground_truth], [y[2] for y in ground_truth], label=\"True Location\", linewidth=4, alpha=0.8)\nplot!(\n    [y[1] for (y, s) in sol], [y[2] for (y, s) in sol],\n    ribbon=(1.96 .* [s[1] for (y, s) in sol], 1.96 .* [s[2] for (y, s) in sol]),\n    label=\"Filter Estimate\",\n    linewidth=4,\n    alpha=0.8,\n    legend=:bottomright,\n)\nsavefig(\"ensemble_kalman_filter_example.svg\")\nnothing # hide","category":"page"},{"location":"examples/ensemble_kalman_filter/","page":"Ensemble Kalman Filter","title":"Ensemble Kalman Filter","text":"(Image: )","category":"page"},{"location":"examples/ensemble_kalman_filter/#References","page":"Ensemble Kalman Filter","title":"References","text":"","category":"section"},{"location":"examples/ensemble_kalman_filter/","page":"Ensemble Kalman Filter","title":"Ensemble Kalman Filter","text":"[1] \"Bayesian Filtering and Smoothing\", Simo Särkka, Cambridge University Press, 2013.","category":"page"},{"location":"algorithms/ensemble_kalman_filter/#Ensemble-Kalman-Filter","page":"Ensemble Kalman filter","title":"Ensemble Kalman Filter","text":"","category":"section"},{"location":"algorithms/ensemble_kalman_filter/#References","page":"Ensemble Kalman filter","title":"References","text":"","category":"section"},{"location":"algorithms/ensemble_kalman_filter/","page":"Ensemble Kalman filter","title":"Ensemble Kalman filter","text":"[1] Mandel, J. (2006). Efficient Implementation of the Ensemble Kalman Filter.\n[2] M. Katzfuss, J. R. Stroud, and C. K. Wikle, “Understanding the Ensemble Kalman Filter,” The American Statistician, vol. 70, no. 4, pp. 350–357,  2016.","category":"page"},{"location":"algorithms/ensemble_kalman_filter/#Methods","page":"Ensemble Kalman filter","title":"Methods","text":"","category":"section"},{"location":"algorithms/ensemble_kalman_filter/","page":"Ensemble Kalman filter","title":"Ensemble Kalman filter","text":"enkf_predict!\nenkf_correct!\nomf_enkf_correct!","category":"page"},{"location":"algorithms/ensemble_kalman_filter/#PhDSE.enkf_predict!","page":"Ensemble Kalman filter","title":"PhDSE.enkf_predict!","text":"enkf_predict!(fcache, Φ, Q, [u])\n\nPrediction step in an Ensemble Kalman filter (EnKF).\n\nArguments\n\nfcache::EnKFCache: a cache holding memory-heavy objects\nΦ::AbstractMatrix: transition matrix, i.e. dynamics of the state space model\nu::AbstractVector (optional): affine control input to the dynamics\n\nReferences\n\n[1] Mandel, J. (2006). Efficient Implementation of the Ensemble Kalman Filter.\n\n\n\n\n\n","category":"function"},{"location":"algorithms/ensemble_kalman_filter/#PhDSE.enkf_correct!","page":"Ensemble Kalman filter","title":"PhDSE.enkf_correct!","text":"enkf_correct!(fcache, H, R_inv, y, [v])\n\nCorrection step in an Ensemble Kalman filter (EnKF).\n\nNote:Calls omf_enkf_correct! intrinsically.\n\nArguments\n\nfcache::EnKFCache: a cache holding memory-heavy objects\nH::AbstractMatrix: measurement matrix of the state space model\nR_inv::AbstractMatrix: inverse of the measurement noise covariance of the state space model\ny::AbstractVector: a measurement (data point)\nv::AbstractVector (optional): affine control input to the measurement\n\nReferences\n\n[1] Mandel, J. (2006). Efficient Implementation of the Ensemble Kalman Filter.\n\n\n\n\n\n","category":"function"},{"location":"algorithms/ensemble_kalman_filter/#PhDSE.omf_enkf_correct!","page":"Ensemble Kalman filter","title":"PhDSE.omf_enkf_correct!","text":"omf_enkf_correct!(fcache, R_inv, y)\n\nCorrection step in an observation-matrix-free (omf) Ensemble Kalman filter (EnKF), assuming that the observation matrix never has to be built.\n\nInstead, the products HX and HA = Hcdotleft(X^f - mathbbEleftX^frightright) are pre-computed outside of the correction function and HX and HA are passed to the correction function. Assuming R_inv is a Diagonal matrix and HX and HA are cheap to compute, this results in a correction cost that is linear in the {state,observation}-dimension.\n\nNote:HX and HA have to be stored in the fcache before calling this function!\n\nArguments\n\nfcache::EnKFCache: a cache holding memory-heavy objects\nR_inv::AbstractMatrix: inverse of the measurement noise covariance of the state space model\ny::AbstractVector: a measurement (data point)\n\nReferences\n\n[1] Mandel, J. (2006). Efficient Implementation of the Ensemble Kalman Filter.\n\n\n\n\n\n","category":"function"},{"location":"examples/solve_1d_heat_eq/#Advanced-example:-Solve-a-partial-differential-equation","page":"Advanced: Solve PDE","title":"Advanced example: Solve a partial differential equation","text":"","category":"section"},{"location":"examples/solve_1d_heat_eq/","page":"Advanced: Solve PDE","title":"Advanced: Solve PDE","text":"using LinearAlgebra\nusing Random\nusing Distributions\nusing ForwardDiff\nusing ToeplitzMatrices\n\nusing Plots\n\nusing PhDSE","category":"page"},{"location":"examples/solve_1d_heat_eq/","page":"Advanced: Solve PDE","title":"Advanced: Solve PDE","text":"We first define some utility functions.","category":"page"},{"location":"examples/solve_1d_heat_eq/","page":"Advanced: Solve PDE","title":"Advanced: Solve PDE","text":"intersperse(vs) = reduce(hcat, vs)'[:]\nstack(x) = copy(reduce(hcat, x)')\n\n\"\"\"\nComputes the system matrices for a discretized q-times-integrated Brownian-motion prior over our dynamics.\n\nCredits: Nathanael Bosch (https://github.com/nathanaelbosch/KalmanFilterToolbox.jl)\n\"\"\"\nfunction discrete_Brownian_motion(dimension::Int64, num_derivatives::Int64, dt::Real)\n    v = 0:num_derivatives\n    f = factorial.(v)\n    A_breve = TriangularToeplitz(dt .^ v ./ f, :U) |> Matrix\n    e = (2 * num_derivatives + 1 .- v .- v')\n    fr = reverse(f)\n    Q_breve = @. dt^e / (e * fr * fr')\n\n    A = kron(I(dimension), A_breve)\n    Q = kron(I(dimension), Q_breve)\n    return A, Q\n\nend\n\n\"\"\"\nComputes projection matrices from the state vector to the respective derivatives.\n\"\"\"\nfunction projectionmatrix(dimension::Int64, num_derivatives::Int64, derivative::Integer)\n    kron(diagm(0 => ones(dimension)), [i == (derivative + 1) ? 1 : 0 for i in 1:num_derivatives+1]')\nend\n\n\"\"\"\nCompute the finite-differences-discretized Laplace operator in one dimension.\n\"\"\"\nfunction Δ_1d(u, δx; bound_val=0.0)\n\tΔu = copy(u)\n\tfor i in 2:length(u)-1\n\t\tΔu[i] = (u[i+1] - 2u[i] + u[i-1]) / (δx^2)\n\tend\n\treturn Δu\nend\nnothing # hide","category":"page"},{"location":"examples/solve_1d_heat_eq/","page":"Advanced: Solve PDE","title":"Advanced: Solve PDE","text":"Set up the state space model","category":"page"},{"location":"examples/solve_1d_heat_eq/","page":"Advanced: Solve PDE","title":"Advanced: Solve PDE","text":"dx = 0.01\nx_grid = 0.0:dx:1.0\n\nd = length(x_grid)\nq = 1\nD = (q + 1) * d\n\nt_0, t_max = (0.0, 0.3)\ndt = 1e-3\n\nΦ, Q = discrete_Brownian_motion(d, q, dt)\n\nproj0 = projectionmatrix(d, q, 0)\nproj1 = projectionmatrix(d, q, 1)\n\nν = 0.2\ninformation_operator(u) = (proj1 * u) .- (ν .* Δ_1d(proj0 * u, dx))\ninformation_operator_jac(u) = ForwardDiff.jacobian(information_operator, u)\n\nR = 1e-10 * Matrix(I(d))\n\nu0 =  exp.(-100 .* (x_grid .- 0.5).^2)\nu0_dot = ν .* Δ_1d(u0, dx)\nU0 = intersperse([u0, u0_dot])\n\nμ₀, Σ₀ = U0, 1e-10 .* Matrix(I(D))\nzero_data = zeros(d)\nnothing # hide","category":"page"},{"location":"examples/solve_1d_heat_eq/","page":"Advanced: Solve PDE","title":"Advanced: Solve PDE","text":"Initialize the cache ...","category":"page"},{"location":"examples/solve_1d_heat_eq/","page":"Advanced: Solve PDE","title":"Advanced: Solve PDE","text":"sol = [(t_0, copy(μ₀), copy(Σ₀))]\nfcache = KFCache(D, d)\nfcache.μ .= μ₀\nfcache.Σ .= Σ₀\nnothing # hide","category":"page"},{"location":"examples/solve_1d_heat_eq/","page":"Advanced: Solve PDE","title":"Advanced: Solve PDE","text":"... and start filtering!","category":"page"},{"location":"examples/solve_1d_heat_eq/","page":"Advanced: Solve PDE","title":"Advanced: Solve PDE","text":"for (i, t) in enumerate(t_0:dt:t_max)\n    # predict\n    kf_predict!(fcache, Φ, Q)\n\n    # linearize observations\n    Hₜ = information_operator_jac(fcache.μ⁻)\n    vₜ = information_operator(fcache.μ⁻) - Hₜ * fcache.μ⁻\n\n    # measure\n    kf_correct!(fcache, Hₜ, R, zero_data, vₜ)\n\n    if i % 5 == 1\n        push!(sol, (t, copy(fcache.μ), copy(fcache.Σ)))\n    end\nend","category":"page"},{"location":"examples/solve_1d_heat_eq/","page":"Advanced: Solve PDE","title":"Advanced: Solve PDE","text":"Finally, plot the results!","category":"page"},{"location":"examples/solve_1d_heat_eq/","page":"Advanced: Solve PDE","title":"Advanced: Solve PDE","text":"anim = @animate for (t, μ, σ) in sol\n\tplot(\n        x_grid,\n        proj0 * μ,\n        ylim=(-0.05, 1.0),\n        linewidth=3,\n        ribbon=1.97 .* stack([sqrt.(proj0 * diag(S)) for (t, m, S) in sol]),\n        label=\"u(t)\",\n        title=\"t = $(round(t; digits=2))\",\n    )\nend\n\n\ngif(\n\tanim,\n\t\"heat_eq_1d_example.gif\",\n\tfps = 10,\n)","category":"page"},{"location":"#PhDSE.jl","page":"Home","title":"PhDSE.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: gh-badge)","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"PhDSE stands for Probabilistic high-Dimensional State Estimation. Its aim is to provide runtime- and memory-efficient implementations of inference algorithms in probabilistic state-space models - all implemented in Julia.","category":"page"},{"location":"#Install","page":"Home","title":"Install","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package is in a very early phase of development and will likely be subject to significant changes in both the interface, as well as the inner workings. Therefore, it is for now not registered as a Julia package, yet.","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you feel like playing around with the package a bit then you can install it directly from GitHub like this:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg\njulia> Pkg.add(url=\"https://github.com/schmidtjonathan/PhDSE.jl.git\")","category":"page"},{"location":"examples/kalman_filter/#Kalman-filter-for-car-tracking","page":"Kalman Filter","title":"Kalman filter for car tracking","text":"","category":"section"},{"location":"examples/kalman_filter/","page":"Kalman Filter","title":"Kalman Filter","text":"From \"Bayesian Filtering and Smoothing\" [1], example 4.3.","category":"page"},{"location":"examples/kalman_filter/","page":"Kalman Filter","title":"Kalman Filter","text":"using LinearAlgebra\nusing Random\nusing Distributions\n\nusing Plots\n\nusing PhDSE","category":"page"},{"location":"examples/kalman_filter/","page":"Kalman Filter","title":"Kalman Filter","text":"First, set up the state space model.","category":"page"},{"location":"examples/kalman_filter/","page":"Kalman Filter","title":"Kalman Filter","text":"function simulate(Φ, Q, u, H, R, v, μ₀, Σ₀, N; rng = Random.GLOBAL_RNG)\n    x = rand(rng, MvNormal(μ₀, Σ₀))\n    states = [x]\n    observations = []\n\n    for i in 1:N\n        push!(states, rand(rng, MvNormal(Φ * states[end] + u, Q)))\n        push!(observations, rand(rng, MvNormal(H * states[end] + v, R)))\n    end\n    return states, observations\nend\n\n\ndt = 0.1\ns1, s2 = 0.5, 0.5\nq1, q2 = 1, 1\n\nA = [1 0 dt 0;\n     0 1 0 dt;\n     0 0 1 0;\n     0 0 0 1]\n\nQ = [q1*dt^3/3 0 q1*dt^2/2 0;\n     0 q2*dt^3/3 0 q2*dt^2/2;\n     q1*dt^2/2 0 q1*dt 0;\n     0 q2*dt^2/2 0 q2*dt]\n\nH = [1 0 0 0; 0 1 0 0]\n\nd, D = size(H)\n\nR = [s1^2 0; 0 s2^2]\n\nμ₀, Σ₀ = zeros(D), 2 * Matrix(1e-5 * I, D, D)\nnothing # hide","category":"page"},{"location":"examples/kalman_filter/","page":"Kalman Filter","title":"Kalman Filter","text":"Next, generate an example state trajectory and according measurements.","category":"page"},{"location":"examples/kalman_filter/","page":"Kalman Filter","title":"Kalman Filter","text":"ground_truth, data = simulate(A, Q, zeros(D), H, R, zeros(d), μ₀, Σ₀, 200, rng=MersenneTwister(3))\nnothing # hide","category":"page"},{"location":"examples/kalman_filter/","page":"Kalman Filter","title":"Kalman Filter","text":"Compute the filtering posterior.","category":"page"},{"location":"examples/kalman_filter/","page":"Kalman Filter","title":"Kalman Filter","text":"sol = [(μ₀, sqrt.(diag(Σ₀)))]\nfcache = KFCache(D, d)\nfcache.μ .= μ₀\nfcache.Σ .= Σ₀\nfor y in data\n    kf_predict!(fcache, A, Q)\n    kf_correct!(fcache, H, R, y)\n    push!(sol, (copy(fcache.μ), sqrt.(diag(fcache.Σ))))\nend\nnothing # hide","category":"page"},{"location":"examples/kalman_filter/","page":"Kalman Filter","title":"Kalman Filter","text":"Finally, plot the results.","category":"page"},{"location":"examples/kalman_filter/","page":"Kalman Filter","title":"Kalman Filter","text":"scatter([y[1] for y in data], [y[2] for y in data], label=\"Measurements\", markersize=2)\nplot!([y[1] for y in ground_truth], [y[2] for y in ground_truth], label=\"True Location\", linewidth=4, alpha=0.8)\nplot!(\n    [y[1] for (y, s) in sol], [y[2] for (y, s) in sol],\n    ribbon=(1.96 .* [s[1] for (y, s) in sol], 1.96 .* [s[2] for (y, s) in sol]),\n    label=\"Filter Estimate\",\n    linewidth=4,\n    alpha=0.8,\n    legend=:bottomright,\n)\nsavefig(\"kalman_filter_example.svg\")\nnothing # hide","category":"page"},{"location":"examples/kalman_filter/","page":"Kalman Filter","title":"Kalman Filter","text":"(Image: )","category":"page"},{"location":"examples/kalman_filter/#References","page":"Kalman Filter","title":"References","text":"","category":"section"},{"location":"examples/kalman_filter/","page":"Kalman Filter","title":"Kalman Filter","text":"[1] \"Bayesian Filtering and Smoothing\", Simo Särkka, Cambridge University Press, 2013.","category":"page"},{"location":"examples/sqrt_kalman_filter/#Square-root-Kalman-filter-for-car-tracking","page":"Square-root Kalman Filter","title":"Square-root Kalman filter for car tracking","text":"","category":"section"},{"location":"examples/sqrt_kalman_filter/","page":"Square-root Kalman Filter","title":"Square-root Kalman Filter","text":"From \"Bayesian Filtering and Smoothing\" [1], example 4.3.","category":"page"},{"location":"examples/sqrt_kalman_filter/","page":"Square-root Kalman Filter","title":"Square-root Kalman Filter","text":"using LinearAlgebra\nusing Random\nusing Distributions\nusing PSDMatrices\n\nusing Plots\n\nusing PhDSE","category":"page"},{"location":"examples/sqrt_kalman_filter/","page":"Square-root Kalman Filter","title":"Square-root Kalman Filter","text":"First, set up the state space model.","category":"page"},{"location":"examples/sqrt_kalman_filter/","page":"Square-root Kalman Filter","title":"Square-root Kalman Filter","text":"function simulate(Φ, Q, u, H, R, v, μ₀, Σ₀, N; rng = Random.GLOBAL_RNG)\n    x = rand(rng, MvNormal(μ₀, Σ₀))\n    states = [x]\n    observations = []\n\n    for i in 1:N\n        push!(states, rand(rng, MvNormal(Φ * states[end] + u, Q)))\n        push!(observations, rand(rng, MvNormal(H * states[end] + v, R)))\n    end\n    return states, observations\nend\n\n\ndt = 0.1\ns1, s2 = 0.5, 0.5\nq1, q2 = 1, 1\n\nA = [1 0 dt 0;\n     0 1 0 dt;\n     0 0 1 0;\n     0 0 0 1]\n\nQ = [q1*dt^3/3 0 q1*dt^2/2 0;\n     0 q2*dt^3/3 0 q2*dt^2/2;\n     q1*dt^2/2 0 q1*dt 0;\n     0 q2*dt^2/2 0 q2*dt]\n\nsqrt_Q = PSDMatrix(cholesky(Q).U)\n\nH = [1 0 0 0; 0 1 0 0]\n\nd, D = size(H)\n\nR = [s1^2 0; 0 s2^2]\nsqrt_R = PSDMatrix(cholesky(R).U)\n\nμ₀, Σ₀ = zeros(D), 2 * Matrix(1e-5 * I, D, D)\nsqrt_Σ₀ = cholesky(Σ₀).U\nnothing # hide","category":"page"},{"location":"examples/sqrt_kalman_filter/","page":"Square-root Kalman Filter","title":"Square-root Kalman Filter","text":"Next, generate an example state trajectory and according measurements.","category":"page"},{"location":"examples/sqrt_kalman_filter/","page":"Square-root Kalman Filter","title":"Square-root Kalman Filter","text":"ground_truth, data = simulate(A, Q, zeros(D), H, R, zeros(d), μ₀, Σ₀, 200, rng=MersenneTwister(3))\nnothing # hide","category":"page"},{"location":"examples/sqrt_kalman_filter/","page":"Square-root Kalman Filter","title":"Square-root Kalman Filter","text":"Compute the filtering posterior.","category":"page"},{"location":"examples/sqrt_kalman_filter/","page":"Square-root Kalman Filter","title":"Square-root Kalman Filter","text":"sol = [(μ₀, sqrt.(diag(Σ₀)))]\nfcache = SqrtKFCache(D, d)\nfcache.μ .= μ₀\ncopy!(fcache.Σ.R, sqrt_Σ₀)\nfor y in data\n    sqrt_kf_predict!(fcache, A, sqrt_Q)\n    sqrt_kf_correct!(fcache, H, sqrt_R, y)\n    push!(sol, (copy(fcache.μ), sqrt.(diag(Matrix(fcache.Σ)))))\nend\nnothing # hide","category":"page"},{"location":"examples/sqrt_kalman_filter/","page":"Square-root Kalman Filter","title":"Square-root Kalman Filter","text":"Finally, plot the results.","category":"page"},{"location":"examples/sqrt_kalman_filter/","page":"Square-root Kalman Filter","title":"Square-root Kalman Filter","text":"scatter([y[1] for y in data], [y[2] for y in data], label=\"Measurements\", markersize=2)\nplot!([y[1] for y in ground_truth], [y[2] for y in ground_truth], label=\"True Location\", linewidth=4, alpha=0.8)\nplot!(\n    [y[1] for (y, s) in sol], [y[2] for (y, s) in sol],\n    ribbon=(1.96 .* [s[1] for (y, s) in sol], 1.96 .* [s[2] for (y, s) in sol]),\n    label=\"Filter Estimate\",\n    linewidth=4,\n    alpha=0.8,\n    legend=:bottomright,\n)\nsavefig(\"sqrt_kalman_filter_example.svg\")\nnothing # hide","category":"page"},{"location":"examples/sqrt_kalman_filter/","page":"Square-root Kalman Filter","title":"Square-root Kalman Filter","text":"(Image: )","category":"page"},{"location":"examples/sqrt_kalman_filter/#References","page":"Square-root Kalman Filter","title":"References","text":"","category":"section"},{"location":"examples/sqrt_kalman_filter/","page":"Square-root Kalman Filter","title":"Square-root Kalman Filter","text":"[1] \"Bayesian Filtering and Smoothing\", Simo Särkka, Cambridge University Press, 2013.","category":"page"}]
}
